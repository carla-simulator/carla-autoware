#!/usr/bin/env python
#
# Copyright (c) 2017 Computer Vision Center (CVC) at the Universitat Autonoma de
# Barcelona (UAB).
# Copyright (c) 2019 Intel Corporation
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.

from __future__ import print_function

import rospy
import sys
import glob
import os
import random

import carla_autoware_sensors

# ==============================================================================
# -- find carla module ---------------------------------------------------------
# ==============================================================================
try:
    sys.path.append(glob.glob('**/carla-*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

import carla

# ==============================================================================
# -- World ---------------------------------------------------------------------
# ==============================================================================

class World(object):
    def __init__(self, carla_world, actor_filter, actor_spawnpoint):
        self.world = carla_world
        self.player = None
        self.gnss_sensor = None
        self.lidar_sensor = None
        self.front_camera = None
        self.view_camera = None
        self._actor_filter = actor_filter
        self._actor_spawnpoint = actor_spawnpoint
        self.restart()

    def restart(self):
        # Get a random blueprint.
        blueprint = random.choice(self.world.get_blueprint_library().filter(self._actor_filter))
        blueprint.set_attribute('role_name', 'ego_vehicle')
        if blueprint.has_attribute('color'):
            color = random.choice(blueprint.get_attribute('color').recommended_values)
            blueprint.set_attribute('color', color)
        # Spawn the player.
        if self._actor_spawnpoint:
            spawn_point = carla.Transform()
            spawn_point.location.x = self._actor_spawnpoint['X']
            spawn_point.location.y = self._actor_spawnpoint['Y']
            spawn_point.location.z = self._actor_spawnpoint['Z']
            spawn_point.rotation.yaw = self._actor_spawnpoint['Yaw']
            if self.player is not None:
                self.destroy()
            while self.player is None:
                self.player = self.world.try_spawn_actor(blueprint, spawn_point)
        else:
            if self.player is not None:
                spawn_point = self.player.get_transform()
                spawn_point.location.z += 2.0
                spawn_point.rotation.roll = 0.0
                spawn_point.rotation.pitch = 0.0
                self.destroy()
                self.player = self.world.try_spawn_actor(blueprint, spawn_point)
            while self.player is None:
                spawn_points = self.world.get_map().get_spawn_points()
                spawn_point = random.choice(spawn_points) if spawn_points else carla.Transform()
                self.player = self.world.try_spawn_actor(blueprint, spawn_point)
        # Set up the sensors.
        self.gnss_sensor = carla_autoware_sensors.GnssSensor(self.player)
        self.lidar_sensor = carla_autoware_sensors.LidarSensor(self.player)
        self.front_camera = carla_autoware_sensors.FrontCamera(self.player)
        self.view_camera = ViewCamera(self.player)

    def destroy(self):
        actors = [
            self.view_camera.sensor,
            self.front_camera.sensor,
            self.gnss_sensor.sensor,
            self.lidar_sensor.sensor,
            self.player]

        for actor in actors:
            if actor is not None:
                actor.destroy()

# ==============================================================================
# -- main() --------------------------------------------------------------------
# ==============================================================================

def main():
    rospy.init_node('carla_client')

    host = rospy.get_param('/carla/host', '127.0.0.1')
    port = rospy.get_param('/carla/port', '2000')
    vehicle_filter = rospy.get_param('/carla/client/vehicle_filter', 'vehicle.*')
    spawn_point = rospy.get_param('/carla/client/spawn_point',{})

    rospy.loginfo('listening to server %s:%s', host, port)
    rospy.loginfo('using vehicle filter: %s', vehicle_filter)
    
    if spawn_point:
        rospy.loginfo('spawning at %s', spawn_point)
    else:
        rospy.loginfo('spawning at random point')
    
    world = None

    try:
        client = carla.Client(host, port)
        client.set_timeout(2.0)

        world = World(client.get_world(), vehicle_filter, spawn_point)

        while not rospy.is_shutdown():
            rospy.sleep(1)

    finally:

        if world is not None:
            world.destroy()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException: pass
        
